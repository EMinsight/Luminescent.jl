var documenterSearchIndex = {
    "docs":
        [{ "location": "guide/#Guide", "page": "Guide", "title": "Guide", "text": "", "category": "section" }, { "location": "guide/#Implementation", "page": "Guide", "title": "Implementation", "text": "", "category": "section" }, { "location": "guide/", "page": "Guide", "title": "Guide", "text": "Length and time are in units of wavelength and period. This normalization allows usage of relative  permitivity and permeability  in equations . Fields including electric, magnetic and current density are simply bundled as a vector of vectors of arrays . Boundary conditions pad the field arrays . PML paddings are multilayered, while All other boundaries add single layers. Paddings are stateful and permanent, increasing the size of field and geometry arrays.  Finite differencing happens every update step3 and are coordinated to implictly implement a staggered Yee's grid .", "category": "page" }, { "location": "guide/#Sources", "page": "Guide", "title": "Sources", "text": "", "category": "section" }, { "location": "guide/", "page": "Guide", "title": "Guide", "text": "If a source has fewer nonzero dimensions than the simulation domain, its signal will get normalized along its singleton dimensions. For example, all planar sources in 3d or line sources in 2d will get scaled up by a factor of 1/dx. This way, discretisation would not affect radiated power.", "category": "page" }, { "location": "guide/", "page": "Guide", "title": "Guide", "text": "PlaneWave\nSource", "category": "page" }, { "location": "guide/#PlaneWave", "page": "Guide", "title": "PlaneWave", "text": "function PlaneWave(f, dims; fields...)\n\nConstructs plane wave source\n\nArgs\n\nf: time function\ndims: eg -1 for wave coming from -x face\nfields: which fields to excite & their scaling constants (typically a current source, eg Jz=1)\n\n\n\n\n\n", "category": "type" }, { "location": "guide/#Source", "page": "Guide", "title": "Source", "text": "function Source(f, c, lb, ub, label=\"\"; fields...)\nfunction Source(f, c, L, label=\"\"; fields...)\n\nConstructs custom  source. Can be used to specify uniform or modal sources\n\nArgs\n\nf: time function\nc: origin or center of source\nlb: lower bounds wrt to c\nub: upper bounds wrt to c\nL: source dimensions in [wavelengths]\nfields: which fields to excite & their scaling constants (typically a current source, eg Jz=1)\n\n\n\n\n\n", "category": "type" }, { "location": "guide/#Boundaries", "page": "Guide", "title": "Boundaries", "text": "", "category": "section" }, { "location": "guide/", "page": "Guide", "title": "Guide", "text": "Unspecified boundaries default to PML ", "category": "page" }, { "location": "guide/", "page": "Guide", "title": "Guide", "text": "Periodic\nPML\nPEC\nPMC", "category": "page" }, { "location": "guide/#Periodic", "page": "Guide", "title": "Periodic", "text": "Periodic(dims)\n\nperiodic boundary\n\n\n\n\n\n", "category": "type" }, { "location": "guide/#PML", "page": "Guide", "title": "PML", "text": "function PML(dims, d=0.25f0, Ïƒ=20.0f0)\n\nConstructs perfectly matched layers (PML aka ABC, RBC) boundary of depth d wavelengths  Doesn't need to be explictly declared as all unspecified boundaries default to PML\n\n\n\n\n\n", "category": "type" }, { "location": "guide/#PEC", "page": "Guide", "title": "PEC", "text": "PEC(dims)\n\nperfect electrical conductor dims: eg -1 for -x side\n\n\n\n\n\n", "category": "type" }, { "location": "guide/#PMC", "page": "Guide", "title": "PMC", "text": "PMC(dims)\n\nperfect magnetic conductor\n\n\n\n\n\n", "category": "type" }, { "location": "guide/#Monitors", "page": "Guide", "title": "Monitors", "text": "", "category": "section" }, { "location": "guide/", "page": "Guide", "title": "Guide", "text": "Monitor\npower\npower_density", "category": "page" }, { "location": "guide/#Monitor", "page": "Guide", "title": "Monitor", "text": "function Monitor(c, L; normal=nothing, label=\"\")\nfunction Monitor(c, lb, ub; normal=nothing, label=\"\")\n\nConstructs monitor which can span a point, line, surface, volume or point cloud monitoring fields or power. \n\nArgs\n\nc: origin or center of monitor\nL: physical dimensions of monitor\nlb: lower bounds wrt to c\nub: upper bounds wrt to c\nnormal: flux monitor direction (eg normal to flux surface)\n\n\n\n\n\n", "category": "function" }, { "location": "guide/#power", "page": "Guide", "title": "power", "text": "function power(m::MonitorInstance, u)\n\ntotal power (Poynting flux) passing thru monitor surface\n\n\n\n\n\n", "category": "function" }, { "location": "guide/#power_density", "page": "Guide", "title": "power_density", "text": "function power_density(m::MonitorInstance, u)\n\npower density (avg Poynting flux) passing thru monitor surface\n\n\n\n\n\n", "category": "function" }, { "location": "guide/#Physics", "page": "Guide", "title": "Physics", "text": "", "category": "section" }, { "location": "guide/", "page": "Guide", "title": "Guide", "text": "step3!\nstep3", "category": "page" }, { "location": "guide/#step3!", "page": "Guide", "title": "step3!", "text": "function step3!(u, p, t, field_padding, source_instances)\nfunction step3!(u1, u, p, t, field_padding, source_instances)\n\nUpdates fields for 3d. Please use step3 instead of step3! when doing AD. Mutating step3! Writes new fields either onto old fields or into buffer arrays u1\n\n\n\n\n\n", "category": "function" }, { "location": "guide/#step3", "page": "Guide", "title": "step3", "text": "function step3(u, p, t, field_padding, source_instances)\n\nUpdates fields for 3d in a manner amenable to AD. See also Mutating step3!\n\n\n\n\n\n", "category": "function" }, { "location": "guide/#GPU-support", "page": "Guide", "title": "GPU support", "text": "", "category": "section" }, { "location": "guide/", "page": "Guide", "title": "Guide", "text": "Simply use Flux.gpu to move simulation variables to GPU. This turns Arrays into CUDA arrays which get processed on GPU for both forward and backpropagation passes", "category": "page" }, { "location": "guide/#Automatic-differentiation-adjoints", "page": "Guide", "title": "Automatic differentiation adjoints", "text": "", "category": "section" }, { "location": "guide/", "page": "Guide", "title": "Guide", "text": "Compatible with Zygote.jl and Flux.jl. Please use step3 instead of step3! when doing AD. See inverse design examples ", "category": "page" }, { "location": "guide/#Generative-inverse-design", "page": "Guide", "title": "Generative inverse design", "text": "", "category": "section" }, { "location": "guide/", "page": "Guide", "title": "Guide", "text": "Please contact us for latest scripts. We wrote Jello.jl, an innovative Fourier domain neural model to generate length scale controlled efficiently  paramaterized geometry .", "category": "page" }, { "location": "guide/#Comparison-with-other-FDTD-software", "page": "Guide", "title": "Comparison with other FDTD software", "text": "", "category": "section" }, { "location": "guide/", "page": "Guide", "title": "Guide", "text": "Our focus is on inverse design and topology optimization using adjoints from automatic differentiation. We love a streamlined API backed by a clear, concise and extensible codebase. Attention is paid to speed and malloc but that's not our main concern. Meep is the most popular open source  FDTD package owing to its maturity and comprehensive features. It supports AD in certain cases using custom adjoints which we avoid in our package in favor of more flexibility . There are numerous commercial software eg Ansys Lumerical, Comsol and various EDA or SI software. TMK none of them supports AD for inverse design ", "category": "page" }, { "location": "tutorials/#Tutorials", "page": "Tutorials", "title": "Tutorials", "text": "", "category": "section" }, { "location": "tutorials/", "page": "Tutorials", "title": "Tutorials", "text": "see examples/", "category": "page" }, { "location": "assets/guide copy/#", "page": "-", "title": "", "text": "", "category": "section" }, { "location": "assets/guide copy/", "page": "-", "title": "-", "text": "Engineers run simulations to improve designs. Each time the design changes, the simulation is re-run. This can be done systematically in \"parameter sweeps\" where different combinations of parameter values are simulated to determine the best design. However, this scales exponentially wrt the number of parameters or DOFs. ", "category": "page" }, { "location": "assets/guide copy/#General-workflow", "page": "-", "title": "General workflow", "text": "", "category": "section" }, { "location": "assets/guide copy/", "page": "-", "title": "-", "text": "We use gradient descent, the same as in machine learning. In lieu of optimizing neural network parameters, we're optimizing geometry (or source) parameters. In each training iteration, we generate geometry, run the simulation, calculate the objective metric, and do a backward pass to derive the gradient wrt the geometry parameters. We then do a gradient based parameter update in preparation for the next iteration.", "category": "page" }, { "location": "assets/guide copy/", "page": "-", "title": "-", "text": "The geometry is thus the first step3. It typically has a static component which we can't change such as interfacing waveguides. Then there's a design component which we can change or optimize. The user is responsible for generating the design geometry wrt design parameters. If any pattern is allowed in the design region, our sister package Jello.jl can be used as a length scale controlled geometry generator. In any case, the result needs to be a 2d/3d array of each relevant materials property eg permitivity. ", "category": "page" }, { "location": "assets/guide copy/", "page": "-", "title": "-", "text": "With geometry ready, we can run the simulation. Duration is roughly the time it takes to reach steady state, such as how long it take for the signal to reach output port. The objective is usually a steady state metric which can be computed using values from the final period.  We optimize geometry for some objective. ", "category": "page" }, { "location": "people/#People", "page": "People", "title": "People", "text": "", "category": "section" }, { "location": "people/#Community", "page": "People", "title": "Community", "text": "", "category": "section" }, { "location": "people/", "page": "People", "title": "People", "text": "Discussion & updates at Julia Discourse", "category": "page" }, { "location": "people/#Contributors", "page": "People", "title": "Contributors", "text": "", "category": "section" }, { "location": "people/", "page": "People", "title": "People", "text": "Paul Shen <pxshen@alumni.stanford.edu>  ", "category": "page" }, { "location": "people/", "page": "People", "title": "People", "text": "Consulting and technical support available  ", "category": "page" }, { "location": "people/", "page": "People", "title": "People", "text": "2024 (c) Paul Shen  ", "category": "page" }, { "location": "#Home", "page": "Home", "title": "Home", "text": "", "category": "section" }, { "location": "", "page": "Home", "title": "Home", "text": "Currently Prerelease. First stable release planned for mid March. Until then, accuracy not validated. Report bugs on Github - we usually respond within a day", "category": "page" }, { "location": "#Overview", "page": "Home", "title": "Overview", "text": "", "category": "section" }, { "location": "", "page": "Home", "title": "Home", "text": "Generative design meets Maxwell's Equations. Differentiable FDTD package for inverse design & topology optimization in semiconductor photonics, acoustics and RF. GPU and automatic differentiation (AD) compatible. Uses AD by Zygote.jl for adjoint optimization. Integrates with Jello.jl to generate length scale controlled paramaterized geometry . Staggered Yee grid update with fully featured boundary conditions & sources. Customizable physics to potentially incorporate dynamics like heat transfer, charge transport.", "category": "page" }, { "location": "#Gallery", "page": "Home", "title": "Gallery", "text": "", "category": "section" }, { "location": "#Quarter-wavelength-antenna-radiating-above-conductive-ground-plane", "page": "Home", "title": "Quarter wavelength antenna radiating above conductive ground plane", "text": "", "category": "section" }, { "location": "", "page": "Home", "title": "Home", "text": "(Image: )", "category": "page" }, { "location": "#Simulation-of-coupling-into-dielectric-slab-waveguide-using-modal-source", "page": "Home", "title": "Simulation of coupling into dielectric slab waveguide using modal source", "text": "", "category": "section" }, { "location": "", "page": "Home", "title": "Home", "text": "(Image: )", "category": "page" }, { "location": "#Simulation-of-plane-wave-scattering-on-Periodic-array", "page": "Home", "title": "Simulation of plane wave scattering on Periodic array", "text": "", "category": "section" }, { "location": "", "page": "Home", "title": "Home", "text": "(Image: )", "category": "page" }, { "location": "#Generative-Inverse-design-of-compact-silicon-photonics-splitter", "page": "Home", "title": "Generative Inverse design of compact silicon photonics splitter", "text": "", "category": "section" }, { "location": "", "page": "Home", "title": "Home", "text": "(Image: )", "category": "page" }, { "location": "#Installation", "page": "Home", "title": "Installation", "text": "", "category": "section" }, { "location": "", "page": "Home", "title": "Home", "text": "Install via ", "category": "page" }, { "location": "", "page": "Home", "title": "Home", "text": "Pkg.add(url=\"https://github.com/paulxshen/Luminescent.jl\")\nPkg.add(url=\"https://github.com/paulxshen/LuminescentVisualization.jl\")", "category": "page" }, { "location": "", "page": "Home", "title": "Home", "text": "LuminescentVisualization.jl contains visualization utilities", "category": "page" }, { "location": "#Quickstart", "page": "Home", "title": "Quickstart", "text": "", "category": "section" }, { "location": "", "page": "Home", "title": "Home", "text": "We do a quick 3d simulation of plane wave scattering on periodic array of dielectric spheres (see gallery movie)", "category": "page" }, { "location": "", "page": "Home", "title": "Home", "text": "\"\"\"\nsimulation of plane wave scattering on periodic array of dielectric spheres\n\"\"\"\n\nusing UnPack, LinearAlgebra, GLMakie\nusing Luminescent,LuminescentVisualization\ndogpu = true\n# dogpu = false\n\nname = \"periodic_scattering\"\nT = 10 # simulation duration in [periods]\nnx = 20\ndx = 1.0 / nx # pixel resolution in [wavelengths]\n\n# geometry\nl = 2 # domain physical size length in [wavelengths]\nsz = nx .* (l, l, l) # domain voxel dimensions\nÏµ1 = Ïµmin = 1 #\nÏµ2 = 2.25 # \nb = F.([norm(v .- sz ./ 2) < 0.5 / dx for v = Base.product(Base.oneto.(sz)...)]) # sphere\nÏµ = Ïµ2 * b + Ïµ1 * (1 .- b)\n\n# setup\nboundaries = [Periodic(2), Periodic(3)]# unspecified boundaries default to PML\nsources = [\n    PlaneWave(t -> cos(2Ï€ * t), -1; Jz=1) # Jz excited plane wave from -x plane (eg -1)\n]\nnormal = [1, 0, 0] #  \nÎ´ = 0.2 # margin\nlm = 1 # monitor side length\nmonitors = [\n    Monitor([Î´, l / 2, l / 2], [0, lm, lm]; normal), # (center, dimensions; normal)\n    Monitor([l - Î´, l / 2, l / 2], [0, lm, lm]; normal),\n]\nconfigs = setup(boundaries, sources, monitors, dx, sz; Ïµmin, T)\n@unpack Î¼, Ïƒ, Ïƒm, dt, geometry_padding, geometry_splits, field_padding, source_instances, monitor_instances, u0, = configs\n\nÏµ, Î¼, Ïƒ, Ïƒm = apply(geometry_padding; Ïµ, Î¼, Ïƒ, Ïƒm)\np = apply(geometry_splits; Ïµ, Î¼, Ïƒ, Ïƒm)\n\n# move to gpu\nif dogpu\n    using CUDA, Flux\n    @assert CUDA.functional()\n    u0, p, field_padding, source_instances = gpu.((u0, p, field_padding, source_instances))\nend\n\n# run simulation\n@showtime u = accumulate(0:dt:T, init=u0) do u, t\n    step3!(deepcopy(u), p, t, dx, dt, field_padding, source_instances)\nend\ny = [power.((m,), u) for m = monitor_instances]\n\n# move back to cpu for plotting\nif dogpu\n    u, p, field_padding, source_instances = cpu.((u, p, field_padding, source_instances))\nend\n\n# make movie, \nEz = map(u) do u\n    u[1][3]\nend\nÏµEz = p[1][3]\ndir = @__DIR__\nrecordsim(\"$dir/$(name).mp4\", Ez, y;\n    dt,\n    field=:Ez,\n    monitor_instances,\n    source_instances,\n    geometry=ÏµEz,\n    elevation=30Â°,\n    playback=1,\n    axis1=(; title=\"$name\\nEz\"),\n    axis2=(; title=\"monitor powers\"),\n)", "category": "page" }]
}
